using System;
using System.IO.Ports;
using System.Xml.Linq;
using System.Linq;
using System.IO;

namespace SerialControl
{
    class Program
    {
        static readonly byte[][] messages = new byte[][]
        {
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x30, 0x30, 0x46, 0x45, 0x0D, 0x0A}, //CH-1 ON [0]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x31, 0x46, 0x46, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A}, //CH-2 ON [1]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x32, 0x46, 0x46, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A}, //CH-3 ON [2]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x33, 0x46, 0x46, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A}, //CH-4 ON [3]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x46, 0x46, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A}, //CH-5 ON [4]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x35, 0x46, 0x46, 0x30, 0x30, 0x46, 0x39, 0x0D, 0x0A}, //CH-6 ON [5]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x36, 0x46, 0x46, 0x30, 0x30, 0x46, 0x38, 0x0D, 0x0A}, //CH-7 ON [6]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x46, 0x46, 0x30, 0x30, 0x46, 0x37, 0x0D, 0x0A}, //CH-8 ON [7]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x38, 0x46, 0x46, 0x30, 0x30, 0x46, 0x36, 0x0D, 0x0A}, //CH-9 ON [8]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x39, 0x46, 0x46, 0x30, 0x30, 0x46, 0x35, 0x0D, 0x0A}, //CH-10 ON [9]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x46, 0x46, 0x30, 0x30, 0x46, 0x34, 0x0D, 0x0A}, //CH-11 ON [10]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x42, 0x46, 0x46, 0x30, 0x30, 0x46, 0x33, 0x0D, 0x0A}, //CH-12 ON [11]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x43, 0x46, 0x46, 0x30, 0x30, 0x46, 0x32, 0x0D, 0x0A}, //CH-13 ON [12]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x44, 0x46, 0x46, 0x30, 0x30, 0x46, 0x31, 0x0D, 0x0A}, //CH-14 ON [13]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x45, 0x46, 0x46, 0x30, 0x30, 0x46, 0x30, 0x0D, 0x0A}, //CH-15 ON [14]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x46, 0x46, 0x46, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A}, //CH-16 ON [15]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x46, 0x44, 0x0D, 0x0A}, //CH-1 OFF [16]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x46, 0x43, 0x0D, 0x0A}, //CH-2 OFF [17]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x32, 0x30, 0x30, 0x30, 0x30, 0x46, 0x42, 0x0D, 0x0A}, //CH-3 OFF [18]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x46, 0x41, 0x0D, 0x0A}, //CH-4 OFF [19]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x46, 0x39, 0x0D, 0x0A}, //CH-5 OFF [20]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x30, 0x46, 0x38, 0x0D, 0x0A}, //CH-6 OFF [21]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x36, 0x30, 0x30, 0x30, 0x30, 0x46, 0x37, 0x0D, 0x0A}, //CH-7 OFF [22]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x30, 0x30, 0x30, 0x30, 0x46, 0x36, 0x0D, 0x0A}, //CH-8 OFF [23]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x46, 0x35, 0x0D, 0x0A}, //CH-9 OFF [24]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x39, 0x30, 0x30, 0x30, 0x30, 0x46, 0x34, 0x0D, 0x0A}, //CH-10 OFF [25]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x41, 0x30, 0x30, 0x30, 0x30, 0x46, 0x33, 0x0D, 0x0A}, //CH-11 OFF [26]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x42, 0x30, 0x30, 0x30, 0x30, 0x46, 0x32, 0x0D, 0x0A}, //CH-12 OFF [27]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x43, 0x30, 0x30, 0x30, 0x30, 0x46, 0x31, 0x0D, 0x0A}, //CH-13 OFF [28]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x44, 0x30, 0x30, 0x30, 0x30, 0x46, 0x30, 0x0D, 0x0A}, //CH-14 OFF [29]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x45, 0x30, 0x30, 0x30, 0x30, 0x46, 0x46, 0x0D, 0x0A}, //CH-15 OFF [30]
            new byte[] {0x3A, 0x46, 0x45, 0x30, 0x35, 0x30, 0x30, 0x30, 0x46, 0x30, 0x30, 0x30, 0x30, 0x46, 0x45, 0x0D, 0x0A}  //CH-16 OFF [31]
        };

        static void Main(string[] args)
        {
            if (args.Length != 2)
            {
                Console.WriteLine("Usage: RelayControl <channel (int 1-16)> <state (int 0=OFF 1=ON)>");
                return;
            }

            int messageIndex;
            int arg0;
            int arg1;
            if (!int.TryParse(args[0], out arg0) || !int.TryParse(args[1], out arg1) || arg0 < 1 || arg0 > 16 || arg1 < 0 || arg1 > 1)
            {
                Console.WriteLine($"Invalid argument passed. Channel must be an integer between 1 and 16. State must be an integer 0 or 1");
                return;
            }
            messageIndex = (arg0 - 1) + (Math.Abs(arg1-1) * 16);
            if (messageIndex < 0 || messageIndex >= messages.Length)
            {
                Console.WriteLine($"Invalid argument passed. Channel must be an integer between 1 and 16. State must be an integer 0 or 1");
                return;
            }

            byte[] message = messages[messageIndex];

            SerialPortSettings serialPortSettings = GetSerialPortSettingsFromConfig();
            string port = "COM" + serialPortSettings.ComPort.ToString();

            try
            {
                using (SerialPort serialPort = new SerialPort(port, serialPortSettings.BaudRate, serialPortSettings.Parity, serialPortSettings.DataBits, serialPortSettings.StopBits))
                {
                    serialPort.Open();
                    if (serialPort.IsOpen)
                    {
                        serialPort.Write(message, 0, message.Length);
                        System.Threading.Thread.Sleep(10);
                        serialPort.Close();
                    }
                    else
                    {
                        Console.WriteLine("Failed to open the serial port.");
                    }
                }
            }
            catch (UnauthorizedAccessException ex)
            {
                Console.WriteLine($"Access to the COM port is denied. {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine($"The port name does not begin with 'COM', or the file type of the port is not supported. {ex.Message}");
            }
            catch (IOException ex)
            {
                Console.WriteLine($"The COM port is in an invalid state. {ex.Message}");
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine($"The specified port on the current instance of the SerialPort is already open. {ex.Message}");
            }
        }

        private static SerialPortSettings GetSerialPortSettingsFromConfig()
        {
            var exeLocation = System.Reflection.Assembly.GetExecutingAssembly().Location;
            var exeDirectory = System.IO.Path.GetDirectoryName(exeLocation);
            var configFilePath = System.IO.Path.Combine(exeDirectory, "config.xml");

            var config = XDocument.Load(configFilePath);

            var comPort = int.Parse(config.Descendants("COMPort").First().Value);
            var baudRate = int.Parse(config.Descendants("BaudRate").First().Value);
            var parity = (Parity)Enum.Parse(typeof(Parity), config.Descendants("Parity").First().Value);
            var dataBits = int.Parse(config.Descendants("DataBits").First().Value);
            var stopBits = (StopBits)Enum.Parse(typeof(StopBits), config.Descendants("StopBits").First().Value);

            return new SerialPortSettings(comPort, baudRate, parity, dataBits, stopBits);
        }
    }

    class SerialPortSettings
    {
        public int ComPort { get; }
        public int BaudRate { get; }
        public Parity Parity { get; }
        public int DataBits { get; }
        public StopBits StopBits { get; }

        public SerialPortSettings(int COMPort, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            ComPort = COMPort;
            BaudRate = baudRate;
            Parity = parity;
            DataBits = dataBits;
            StopBits = stopBits;
        }
    }
}
